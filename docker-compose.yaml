version: '3'

x-logging: &logging
  driver: loki-compose
  options:
    loki-url: "http://localhost:3100/loki/api/v1/push"
    loki-retries: "1"
    loki-tenant-id: "tenant1"

x-dns: &loki-dns
  loki:
    aliases:
      - loki

services:
  app:
    container_name: app
    build:
      context: ./php
      dockerfile: Dockerfile
    working_dir: /var/www/
    restart: unless-stopped
    volumes:
      - ./bagisto:/var/www/
    networks:
      - app
    environment:
      DB_HOST: db
      DB_DATABASE: bagisto
      DB_USERNAME: laravel
      DB_PASSWORD: laravelpassworddb
    depends_on:
      read:
        condition: service_started
      write:
        condition: service_started
      promtail:
        condition: service_started
      grafana:
        condition: service_started
      nginx:
        condition: service_started
      db:
        condition: service_healthy
    logging:
      <<: *logging

  nginx:
    image: nginx:1.17-alpine
    ports:
      - 8000:80
    volumes:
      - ./bagisto:/var/www/
      - ./nginx/:/etc/nginx/conf.d/
    restart: unless-stopped
    networks:
      - app
    healthcheck:
      test: ["CMD", "nc", "-vz", "-w1", "localhost", "80"]
      interval: 1s
      timeout: 1s
      retries: 30
    logging:
      <<: *logging

  k6:
    image: grafana/k6
    # command: 'run --vus 10 --iterations 50 -'
    command: 'run -'
    depends_on:
      - nginx
    networks:
      - app
    logging:
      <<: *logging

  db:
    image: mariadb:10.3
    container_name: db
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: bagisto
      MYSQL_USER: laravel
      MYSQL_PASSWORD: laravelpassworddb
      MYSQL_ROOT_PASSWORD: rootpasswordmysql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', '127.0.0.1', '--silent', '-ularavel', '-plaravelpassworddb']
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - mysql:/var/lib/mysql/
      - ./mysql/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app
    logging:
      <<: *logging

  read:
    image: grafana/loki:2.4.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  write:
    image: grafana/loki:2.4.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3100
      - 7946
      - 9095
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.4.2
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml:ro
      - ./bagisto/storage/logs/:/app/logs/
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - loki
    logging:
      <<: *logging

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    logging:
      <<: *logging
    ports:
      - 9000
    volumes:
      - minio:/data
    networks:
      - loki

  grafana:
    image: grafana/grafana:8.2.6
    logging:
      <<: *logging
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - MYSQL_ROOT_PASSWORD=rootpasswordmysql
    depends_on:
      - gateway
      - prometheus
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./grafana/dashboards:/etc/grafana/dashboards/
    ports:
      - "3000:3000"
    networks:
      - loki
      - app

  gateway:
    logging:
      <<: *logging
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location /read/ready {
              proxy_pass       http://read:3100/ready;
            }

            location /write/ready {
              proxy_pass       http://write:3100/ready;
            }

            location /read/metrics {
              proxy_pass       http://read:3100/metrics;
            }

            location /write/metrics {
              proxy_pass       http://write:3100/metrics;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v2.25.0
    ports:
      - 9090:9090
    depends_on:
      - sql_exporter
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    networks:
      - app
      - loki

  sql_exporter:
    image: githubfree/sql_exporter:latest
    ports:
      - 9399:9399
    depends_on:
      - db
    command:
      - -config.file=/etc/sql_exporter/sql_exporter.yml
    volumes:
      - ./sql_exporter/sql_exporter.yml:/etc/sql_exporter/sql_exporter.yml
    networks:
      - app
    logging:
      <<: *logging

networks:
  app:
  loki:

volumes:
  mysql:
  minio:
  prometheus: