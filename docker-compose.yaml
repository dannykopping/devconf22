version: '3'

x-dns: &loki-dns
  loki:
    aliases:
      - loki

services:
  slackernews:
    container_name: slackernews
    image: dannykopping/datatau:latest
    ports:
      - 8002:80
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_NAME: slackernews
      DATABASE_USER: slackernews
      DATABASE_PASS: slackernewspass
      DATABASE_HOST: db
    networks:
      - app

  k6:
    container_name: k6
    build:
      context: k6
    # command: 'run --vus 10 --iterations 50 -'
    command: 'run -'
    depends_on:
      - slackernews
    networks:
      - app

  db:
    container_name: db
    image: mariadb:10.3
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: slackernews
      MYSQL_USER: slackernews
      MYSQL_PASSWORD: slackernewspass
      MYSQL_ROOT_PASSWORD: rootpasswordmysql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', '127.0.0.1', '--silent', '-uslackernews', '-pslackernewspass']
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - mysql:/var/lib/mysql/
      - ./mysql/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app

  mysqld_exporter:
    container_name: mysqld_exporter
    image: prom/mysqld-exporter
    ports:
      - 9104:9104
    environment:
      - DATA_SOURCE_NAME=root:rootpasswordmysql@(db:3306)/
    networks:
      - app

  read:
    container_name: loki-read
    image: grafana/loki:k88-c660a7e
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  write:
    container_name: loki-write
    image: grafana/loki:k88-c660a7e
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    container_name: promtail
    image: grafana/promtail:k88-c660a7e
    volumes:
      - ./loki/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    networks:
      - loki

  minio:
    container_name: minio
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - minio:/data
    networks:
      - loki

  grafana:
    container_name: grafana
    image: grafana/grafana:8.2.6
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - MYSQL_ROOT_PASSWORD=rootpasswordmysql
    depends_on:
      - gateway
      - prometheus
      - promtail
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./grafana/dashboards:/etc/grafana/dashboards/
    ports:
      - "3000:3000"
    networks:
      - loki
      - app

  gateway:
    container_name: loki-gateway
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location /read/ready {
              proxy_pass       http://read:3100/ready;
            }

            location /write/ready {
              proxy_pass       http://write:3100/ready;
            }

            location /read/metrics {
              proxy_pass       http://read:3100/metrics;
            }

            location /write/metrics {
              proxy_pass       http://write:3100/metrics;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    networks:
      - loki

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.25.0
    ports:
      - 9090:9090
    depends_on:
      - sql_exporter
      - alertmanager
      - node_exporter
      - mysqld_exporter
    command: ['--log.level=debug', '--config.file=/etc/prometheus/prometheus.yml']
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus:/prometheus
    networks:
      - app
      - loki

  sql_exporter:
    container_name: sql_exporter
    image: githubfree/sql_exporter:latest
    ports:
      - 9399:9399
    depends_on:
      - db
    command:
      - -config.file=/etc/sql_exporter/sql_exporter.yml
    volumes:
      - ./sql_exporter/sql_exporter.yml:/etc/sql_exporter/sql_exporter.yml
    networks:
      - app

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    ports:
      - 9093:9093
    command: ['--log.level=debug', '--config.file=/etc/alertmanager/alertmanager.yml']
    volumes:
      - ./alertmanager/config.yaml:/etc/alertmanager/alertmanager.yml
      - alertmanager:/alertmanager
    depends_on:
      - bulb
    networks:
      - app

  bulb:
    container_name: bulb
    build:
      context: bulb
      args:
        - email=${MEROSS_EMAIL}
        - password=${MEROSS_PASSWORD}
    ports:
      - 5000:80
    networks:
      - app

  node_exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    # network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - app

networks:
  app:
  loki:

volumes:
  mysql:
  minio:
  prometheus:
  alertmanager: